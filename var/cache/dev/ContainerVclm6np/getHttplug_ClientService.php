<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'httplug.client' shared service.

include_once $this->targetDirs[3].'\\vendor\\php-http\\client-common\\src\\HttpMethodsClientInterface.php';
include_once $this->targetDirs[3].'\\vendor\\php-http\\client-common\\src\\HttpMethodsClient.php';
include_once $this->targetDirs[3].'\\vendor\\php-http\\client-common\\src\\PluginClient.php';
include_once $this->targetDirs[3].'\\vendor\\php-http\\httplug-bundle\\src\\ClientFactory\\ClientFactory.php';
include_once $this->targetDirs[3].'\\vendor\\php-http\\httplug-bundle\\src\\Collector\\ProfileClientFactory.php';
include_once $this->targetDirs[3].'\\vendor\\php-http\\httplug-bundle\\src\\ClientFactory\\AutoDiscoveryFactory.php';
include_once $this->targetDirs[3].'\\vendor\\php-http\\client-common\\src\\Plugin.php';
include_once $this->targetDirs[3].'\\vendor\\php-http\\client-common\\src\\Plugin\\ContentLengthPlugin.php';
include_once $this->targetDirs[3].'\\vendor\\php-http\\client-common\\src\\Plugin\\RedirectPlugin.php';

return $this->services['httplug.client'] = new \Http\Client\Common\HttpMethodsClient(${($_ = isset($this->services['Http\Client\Common\PluginClientFactory']) ? $this->services['Http\Client\Common\PluginClientFactory'] : $this->getPluginClientFactoryService()) && false ?: '_'}->createClient((new \Http\HttplugBundle\Collector\ProfileClientFactory(new \Http\HttplugBundle\ClientFactory\AutoDiscoveryFactory(), ${($_ = isset($this->services['httplug.collector.collector']) ? $this->services['httplug.collector.collector'] : ($this->services['httplug.collector.collector'] = new \Http\HttplugBundle\Collector\Collector())) && false ?: '_'}, ${($_ = isset($this->services['httplug.collector.formatter']) ? $this->services['httplug.collector.formatter'] : $this->getHttplug_Collector_FormatterService()) && false ?: '_'}, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : ($this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true))) && false ?: '_'}))->createClient([]), [0 => new \Http\Client\Common\Plugin\ContentLengthPlugin(), 1 => new \Http\Client\Common\Plugin\RedirectPlugin(['preserve_header' => true, 'use_default_for_multiple' => true])], ['client_name' => 'app']), ${($_ = isset($this->services['httplug.message_factory.default']) ? $this->services['httplug.message_factory.default'] : $this->load('getHttplug_MessageFactory_DefaultService.php')) && false ?: '_'});
