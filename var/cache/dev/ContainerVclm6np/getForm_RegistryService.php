<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'form.registry' shared service.

include_once $this->targetDirs[3].'\\vendor\\symfony\\form\\FormRegistryInterface.php';
include_once $this->targetDirs[3].'\\vendor\\symfony\\form\\FormRegistry.php';
include_once $this->targetDirs[3].'\\vendor\\symfony\\form\\FormExtensionInterface.php';
include_once $this->targetDirs[3].'\\vendor\\symfony\\form\\Extension\\DependencyInjection\\DependencyInjectionExtension.php';

return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry([0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\ServiceLocator(['App\\Form\\CampusType' => function () {
    return ${($_ = isset($this->services['App\Form\CampusType']) ? $this->services['App\Form\CampusType'] : ($this->services['App\Form\CampusType'] = new \App\Form\CampusType())) && false ?: '_'};
}, 'App\\Form\\CancelEventType' => function () {
    return ${($_ = isset($this->services['App\Form\CancelEventType']) ? $this->services['App\Form\CancelEventType'] : ($this->services['App\Form\CancelEventType'] = new \App\Form\CancelEventType())) && false ?: '_'};
}, 'App\\Form\\CityType' => function () {
    return ${($_ = isset($this->services['App\Form\CityType']) ? $this->services['App\Form\CityType'] : ($this->services['App\Form\CityType'] = new \App\Form\CityType())) && false ?: '_'};
}, 'App\\Form\\EventFilterType' => function () {
    return ${($_ = isset($this->services['App\Form\EventFilterType']) ? $this->services['App\Form\EventFilterType'] : ($this->services['App\Form\EventFilterType'] = new \App\Form\EventFilterType())) && false ?: '_'};
}, 'App\\Form\\EventType' => function () {
    return ${($_ = isset($this->services['App\Form\EventType']) ? $this->services['App\Form\EventType'] : ($this->services['App\Form\EventType'] = new \App\Form\EventType())) && false ?: '_'};
}, 'App\\Form\\LocationType' => function () {
    return ${($_ = isset($this->services['App\Form\LocationType']) ? $this->services['App\Form\LocationType'] : ($this->services['App\Form\LocationType'] = new \App\Form\LocationType())) && false ?: '_'};
}, 'App\\Form\\PasswordFormType' => function () {
    return ${($_ = isset($this->services['App\Form\PasswordFormType']) ? $this->services['App\Form\PasswordFormType'] : ($this->services['App\Form\PasswordFormType'] = new \App\Form\PasswordFormType())) && false ?: '_'};
}, 'App\\Form\\RegistrationFormType' => function () {
    return ${($_ = isset($this->services['App\Form\RegistrationFormType']) ? $this->services['App\Form\RegistrationFormType'] : ($this->services['App\Form\RegistrationFormType'] = new \App\Form\RegistrationFormType())) && false ?: '_'};
}, 'App\\Form\\StateType' => function () {
    return ${($_ = isset($this->services['App\Form\StateType']) ? $this->services['App\Form\StateType'] : ($this->services['App\Form\StateType'] = new \App\Form\StateType())) && false ?: '_'};
}, 'App\\Form\\SubscribeEventType' => function () {
    return ${($_ = isset($this->services['App\Form\SubscribeEventType']) ? $this->services['App\Form\SubscribeEventType'] : ($this->services['App\Form\SubscribeEventType'] = new \App\Form\SubscribeEventType())) && false ?: '_'};
}, 'App\\Form\\UserType' => function () {
    return ${($_ = isset($this->services['App\Form\UserType']) ? $this->services['App\Form\UserType'] : ($this->services['App\Form\UserType'] = new \App\Form\UserType())) && false ?: '_'};
}, 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => function () {
    return ${($_ = isset($this->services['form.type.entity']) ? $this->services['form.type.entity'] : $this->load('getForm_Type_EntityService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => function () {
    return ${($_ = isset($this->services['form.type.choice']) ? $this->services['form.type.choice'] : $this->load('getForm_Type_ChoiceService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => function () {
    return ${($_ = isset($this->services['form.type.form']) ? $this->services['form.type.form'] : $this->load('getForm_Type_FormService.php')) && false ?: '_'};
}]), ['Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.form.transformation_failure_handling']) ? $this->services['form.type_extension.form.transformation_failure_handling'] : $this->load('getForm_TypeExtension_Form_TransformationFailureHandlingService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_extension.form.http_foundation']) ? $this->services['form.type_extension.form.http_foundation'] : $this->load('getForm_TypeExtension_Form_HttpFoundationService.php')) && false ?: '_'};
    yield 2 => ${($_ = isset($this->services['form.type_extension.form.validator']) ? $this->services['form.type_extension.form.validator'] : $this->load('getForm_TypeExtension_Form_ValidatorService.php')) && false ?: '_'};
    yield 3 => ${($_ = isset($this->services['form.type_extension.upload.validator']) ? $this->services['form.type_extension.upload.validator'] : $this->load('getForm_TypeExtension_Upload_ValidatorService.php')) && false ?: '_'};
    yield 4 => ${($_ = isset($this->services['form.type_extension.csrf']) ? $this->services['form.type_extension.csrf'] : $this->load('getForm_TypeExtension_CsrfService.php')) && false ?: '_'};
    yield 5 => ${($_ = isset($this->services['form.type_extension.form.data_collector']) ? $this->services['form.type_extension.form.data_collector'] : $this->load('getForm_TypeExtension_Form_DataCollectorService.php')) && false ?: '_'};
}, 6), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.repeated.validator']) ? $this->services['form.type_extension.repeated.validator'] : ($this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension())) && false ?: '_'};
}, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.submit.validator']) ? $this->services['form.type_extension.submit.validator'] : ($this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension())) && false ?: '_'};
}, 1)], new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_guesser.validator']) ? $this->services['form.type_guesser.validator'] : $this->load('getForm_TypeGuesser_ValidatorService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_guesser.doctrine']) ? $this->services['form.type_guesser.doctrine'] : $this->load('getForm_TypeGuesser_DoctrineService.php')) && false ?: '_'};
}, 2), NULL)], ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : $this->load('getForm_ResolvedTypeFactoryService.php')) && false ?: '_'});
